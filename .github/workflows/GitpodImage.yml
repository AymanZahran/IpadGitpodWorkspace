name: DockerImageBuild

on:   
  push:
    branches:
      - master
    tags:
      - v*
env:
  GITPOD_IMAGE_NAME: ipad-gitpod-image
  JENKINS_IMAGE_NAME: ipad-jenkins-image
  ANSIBLE_CONTROLLER_IMAGE_NAME: ipad-ansiblecontroller-image
  ANSIBLE_TARGET_IMAGE_NAME: ipad-ansibletarget-image

jobs:
  BuildGitpodImage:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v3

      - name: Build Docker Image
        run: docker build . --file Dockerfile
      
      - name: Log in to GHCR registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

      - name: Push To GHCP
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$GITPOD_IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $GITPOD_IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION 
      
      - name: Log in to Docker Hub
        run: docker login --username aymanzahran --password $$DOCKERHUB_PERSONAL_ACCESS_TOKEN

      - name: Push To Dockerhub
        run: |
          IMAGE_ID=${{ github.repository_owner }}/$GITPOD_IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $GITPOD_IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
  
  BuildJenkinsImage:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v3

      - name: Build Docker Image
        run: docker build . --file Dockerfile
      
      - name: Log in to GHCR registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

      - name: Push To GHCP
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$JENKINS_IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $JENKINS_IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION 
      
      - name: Log in to Docker Hub
        run: docker login --username aymanzahran --password $$DOCKERHUB_PERSONAL_ACCESS_TOKEN

      - name: Push To Dockerhub
        run: |
          IMAGE_ID=${{ github.repository_owner }}/$JENKINS_IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $JENKINS_IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
  
  BuildAnsibleControllerImage:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v3

      - name: Build Docker Image
        run: docker build . --file Dockerfile
      
      - name: Log in to GHCR registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

      - name: Push To GHCP
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$ANSIBLE_CONTROLLER_IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $ANSIBLE_CONTROLLER_IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION 
      
      - name: Log in to Docker Hub
        run: docker login --username aymanzahran --password $$DOCKERHUB_PERSONAL_ACCESS_TOKEN

      - name: Push To Dockerhub
        run: |
          IMAGE_ID=${{ github.repository_owner }}/$ANSIBLE_CONTROLLER_IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $ANSIBLE_CONTROLLER_IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
  
  BuildAnsibleTargetImage:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v3

      - name: Build Docker Image
        run: docker build . --file Dockerfile
      
      - name: Log in to GHCR registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

      - name: Push To GHCP
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$ANSIBLE_TARGET_IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $ANSIBLE_TARGET_IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION 
      
      - name: Log in to Docker Hub
        run: docker login --username aymanzahran --password $$DOCKERHUB_PERSONAL_ACCESS_TOKEN

      - name: Push To Dockerhub
        run: |
          IMAGE_ID=${{ github.repository_owner }}/$ANSIBLE_TARGET_IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $ANSIBLE_TARGET_IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
  