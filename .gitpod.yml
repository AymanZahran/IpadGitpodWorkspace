image: aymanzahran/ipad-gitpod-image
  #file: Dockerfile.Dockerfile
tasks:
  - name: persist env
    command: eval $(gp env -e)

  - name: Authenticate Terraform Cloud
    init: |
      mkdir -p ~/.terraform.d/
      cat << EOF > ~/.terraform.d/credentials.tfrc.json
      {
        "credentials": {
          "app.terraform.io": {
            "token": "$TF_API_TOKEN"
          }
        }
      }
      EOF
    command: |
      echo "Terraform Authenticated"
      gp sync-done terraform-authenticated
  
  - name: Authenticate Provider
    init: |
      if [[ $K8S_PROVIDER == "AWS" ]]
      then
        echo "[gitpod]" > ~/.aws/config
        echo "region = $AWS_DEFAULT_REGION" >> ~/.aws/config
        echo "cli_auto_prompt = on-partial" >> ~/.aws/config
        echo "[gitpod]" > ~/.aws/credentials
        echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
        echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
      elif [[ $K8S_PROVIDER == "AZURE" ]]
      then
        echo "Pending.."
      elif [[ $K8S_PROVIDER == "GCP" ]]
      then
        echo "Pending.."
      elif [[ $K8S_PROVIDER == "DIGITAL_OCEAN" ]]
      then
        mkdir -p ~/.config/doctl
        echo "access-token: $DIGITAL_OCEAN_TOKEN" > ~/.config/doctl/config.yaml
      else
        echo "No Provider to Authenticate"
      fi
    command: |
      echo "$K8S_PROVIDER Authenticated"
      gp sync-done provider-authenticated

  - name: Deploy Kubernetes Cluster
    init: |
      gp sync-await terraform-authenticated
      gp sync-await provider-authenticated
    command: |
      if [[ "$K8S_PROVIDER" == "AWS" ]]
      then
        cd Infrastructure/AWS
        cdktf synth
        cdktf deploy --auto-approve
      elif [[ $K8S_PROVIDER == "AZURE" ]]
      then
        cd Infrastructure/Azure
        cdktf synth
        cdktf deploy --auto-approve
      elif [[ $K8S_PROVIDER == "GCP" ]]
      then
        cd Infrastructure/GCP
        cdktf synth
        cdktf deploy --auto-approve
      elif [[ $K8S_PROVIDER == "DIGITAL_OCEAN" ]]
      then
        cd Infrastructure/DigitalOcean
        terraform init
        terraform apply -var="DIGITAL_OCEAN_TOKEN=$DIGITAL_OCEAN_TOKEN" --auto-approve
        doctl kubernetes cluster kubeconfig save do-cluster
      else
        echo $K8S_CONFIG | base64 --decode > ~/.kube/config
      fi
      echo "Kubernetes Cluster Deployed"
      gp sync-done deploy-kubernetes-cluster

  - name: Launch ArgoCD
    init: |
      gp sync-await deploy-kubernetes-cluster
      kubectl create namespace argocd
      kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
      kubectl apply -f Configuration/argocd-app.yaml
    command: |
      sleep 20
      kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 --decode && echo
      kubectl port-forward svc/argocd-server 8080:443 -n argocd  
      
  - name: Expose Services
    init: gp sync-await deploy-kubernetes-cluster
    command: |
      sleep 60
      kubectl port-forward -n tekton-pipelines svc/tekton-dashboard 9097:9097 &
      kubectl port-forward -n kubernetes-dashboard svc/kubernetes-dashboard 3000:443 &
      kubectl port-forward -n kube-prometheus-stack svc/kube-prometheus-stack-prometheus 9090:9090 &
      kubectl port-forward -n kube-prometheus-stack svc/kube-prometheus-stack-grafana 9091:80 &
      kubectl autoscale deployment -n nginx nginx-ingress-ingress-nginx-controller --cpu-percent=50 --min=1 --max=3 &

vscode:
  extensions:
    - ms-azuretools.vscode-docker
    - ms-kubernetes-tools.vscode-kubernetes-tools
    - amazonwebservices.aws-toolkit-vscode
    - ms-toolsai.jupyter
    - esbenp.prettier-vscode
    - dbaeumer.vscode-eslint
    - hashicorp.terraform
    - eg2.vscode-npm-script
    - christian-kohler.npm-intellisense
    - christian-kohler.path-intellisense
    - ms-python.python
    - rangav.vscode-thunder-client
    - PKief.material-icon-theme
