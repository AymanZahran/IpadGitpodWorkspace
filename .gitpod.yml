image: aymanzahran/ipad-gitpod-image
  #file: .gitpod.Dockerfile
tasks:
  - name: persist env
    command: eval $(gp env -e)
  
  - name: Authenticate AWS
    init: |
      cat << EOF > ~/.aws/config
      [gitpod]
      region = $AWS_DEFAULT_REGION
      cli_auto_prompt = on-partial
      EOF
      cat << EOF > ~/.aws/credentials
      [gitpod]
      aws_access_key_id = $AWS_ACCESS_KEY_ID
      aws_secret_access_key = $AWS_SECRET_ACCESS_KEY
      EOF
    command: |
      echo "AWS Authenticated"
      gp sync-done aws-authenticated
  
  - name: Authenticate Azure
    command: |
      echo "Azure Authenticated"
      gp sync-done azure-authenticated
  
  - name: Authenticate GCP
    command: |
      echo "GCP Authenticated"
      gp sync-done gcp-authenticated
  
  - name: Authenticate Digital Ocean
    init: |
      mkdir -p ~/.config/doctl
      echo "access-token: $DIGITAL_OCEAN_TOKEN" > ~/.config/doctl/config.yaml
    command: |
      echo "Digital Ocean Authenticated"
      gp sync-done do-authenticated

  - name: Authenticate Linode
    init: |
      mkdir -p ~/.config/doctl
      cat << EOF > ~/.config/linode-cli
      [DEFAULT]
      default-user = AymanZahran

      [AymanZahran]
      token = $LINODE_TOKEN
      EOF
    command: |
      echo "Linode Authenticated"
      gp sync-done linode-authenticated

  - name: Authenticate Terraform Cloud
    init: |
      mkdir -p ~/.terraform.d/
      cat << EOF > ~/.terraform.d/credentials.tfrc.json
      {
        "credentials": {
          "app.terraform.io": {
            "token": "$TERRAFORM_TOKEN"
          }
        }
      }
      EOF
    command: |
      echo "Terraform Authenticated"
      gp sync-done terraform-authenticated
  
  - name: Deploy Kubernetes Cluster
    init: |
      gp sync-done aws-authenticated
      gp sync-done azure-authenticated
      gp sync-done gcp-authenticated
      gp sync-await do-authenticated
      gp sync-await linode-authenticated
      gp sync-await terraform-authenticated
    command: |
      if [ $K8S_PROVIDER == AWS ]
      then
        echo "Pending.."
      elif [ $K8S_PROVIDER == AZURE ]
      then
        echo "Pending..
      elif [ $K8S_PROVIDER == GCP ]
      then
        echo "Pending.."
      elif [ $K8S_PROVIDER == DIGITAL_OCEAN ]
      then
        cd DigitalOcean
        export TF_VAR_DIGITAL_OCEAN_TOKEN=$DIGITAL_OCEAN_TOKEN
        terraform init
        terraform apply --auto-approve
        doctl kubernetes cluster kubeconfig save do-cluster
      elif [ $K8S_PROVIDER == LINODE ]
      then
        cd Linode
        export TF_VAR_LINODE_TOKEN=$LINODE_TOKEN
        terraform init
        terraform apply --auto-approve
        linode-cli lke kubeconfig-view lke-cluster > ~/.kube/config
      else
        echo $K8S_CONFIG | base64 --decode > ~/.kube/config
      fi
      echo "Kubernetes Cluster Deployed"
      gp sync-done deploy-kubernetes-cluster

  - name: Launch kubernetes-dashboard
    init: |
      gp sync-await deploy-kubernetes-cluster
      helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/
      kubectl create ns kubernetes-dashboard
      helm install -n kubernetes-dashboard kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard
      helm upgrade -n kubernetes-dashboard kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard
    command: |
      sleep 20
      kubectl port-forward -n kubernetes-dashboard svc/kubernetes-dashboard 3000:443

  - name: Launch metrics-server
    init: gp sync-await deploy-kubernetes-cluster
    command: |
      helm repo add bitnami https://charts.bitnami.com/bitnami
      kubectl create ns metrics-server
      helm install -n metrics-server metrics-server bitnami/metrics-server
       helm upgrade --namespace metrics-server metrics-server bitnami/metrics-server --set apiService.create=true

  - name: Launch kube-prometheus-stack
    init: |
      gp sync-await deploy-kubernetes-cluster
      helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      helm repo update
      kubectl create ns kube-prometheus-stack
      helm install -n kube-prometheus-stack kube-prometheus-stack prometheus-community/kube-prometheus-stack
      helm upgrade -n kube-prometheus-stack  kube-prometheus-stack prometheus-community/kube-prometheus-stack
    command: |
      sleep 20
      kubectl port-forward -n kube-prometheus-stack svc/kube-prometheus-stack-prometheus 9090:9090
      kubectl port-forward -n kube-prometheus-stack svc/kube-prometheus-stack-grafana 9091:80
  
  - name: Launch Jenkins
    init: |
      gp sync-await deploy-kubernetes-cluster
      kubectl apply -f Kubernetes/jenkins-master.yaml
    command: |
      sleep 20
      kubectl port-forward service/jenkins-master 8081:80
  
  - name: Launch Ansible Controller
    init: |
      gp sync-await deploy-kubernetes-cluster
      kubectl apply -f Kubernetes/ansible-controller.yaml
    command: |
      sleep 20
      kubectl port-forward service/ansible-controller 8082:80
  
  - name: Launch Ansible Target
    init: |
      gp sync-await deploy-kubernetes-cluster
      kubectl apply -f Kubernetes/ansible-target.yaml
    command: |
      sleep 20
      kubectl port-forward service/ansible-target 8083:80
  
  - name: Launch NGINX Controller
    init: |
      gp sync-await deploy-kubernetes-cluster
      helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      helm repo update
      kubectl create ns nginx
      helm install -n nginx nginx-ingress ingress-nginx/ingress-nginx
      helm upgrade -n nginx nginx-ingress ingress-nginx/ingress-nginx
    command: |
      kubectl autoscale deployment -n nginx nginx-ingress-ingress-nginx-controller --cpu-percent=50 --min=1 --max=3
  
  - name: Launch NGINX Ingress Rules
    init: gp sync-await deploy-kubernetes-cluster
    command: |
      sleep 20
      kubectl apply -f Kubernetes/ingress.yml

vscode:
  extensions:
    - ms-azuretools.vscode-docker
    - ms-kubernetes-tools.vscode-kubernetes-tools
    - amazonwebservices.aws-toolkit-vscode
    - ms-toolsai.jupyter
    - esbenp.prettier-vscode
    - dbaeumer.vscode-eslint
    - hashicorp.terraform
    - eg2.vscode-npm-script
    - christian-kohler.npm-intellisense
    - christian-kohler.path-intellisense
    - ms-python.python
    - rangav.vscode-thunder-client
    - PKief.material-icon-theme
